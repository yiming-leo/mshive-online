name: Release On Aliyun
# 现在项目需要用github-ci将项目配置好，用docker打包，并且把Nginx也得塞进去跑起来，相当于打包好的镜像在指定后的服务器上能通过docker命令直接跑起来
on:
  push:
    branches:
      - release_aliyun

jobs:
  dockerize_project:
    name: Build(Dockerize) With Dockerfile
    runs-on: ubuntu-latest
    steps:
      #---------check out-------
      - name: Checkout Repository
        uses: actions/checkout@v3
      #---------Set up Docker Buildx------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      #---------Build Docker Image with ssh arg-------
      - name: Build Docker Image
        run: |
          docker build \
             --build-arg PEM_CONTENT="${{ secrets.SSH_DOMAIN_PEM }}" \
             --build-arg KEY_CONTENT="${{ secrets.SSH_DOMAIN_KEY }}" \
             -t mshive-frontend:latest .
      #---------Check Docker Image-------
      - name: Check if where are my built Docker Image
        run: |
          if docker images mshive-frontend:latest | grep -q mshive-frontend; then
            echo "Docker image mshive-frontend:latest is built successfully."
          else
            echo "Failed to build Docker image mshive-frontend:latest."
            exit 1
          fi
      #---------Save Docker Image to Current Dir, or You Can't Find Where It Is------
      - name: Save Docker Image to Current Dir
        run: |
          docker save -o /tmp/mshive-frontend.tar mshive-frontend:latest
      #---------upload artifact to other job-------
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mshive-frontend
          path: /tmp/mshive-frontend.tar

  verify_image:
    name: Verify If Docker Image Exists
    needs: dockerize_project
    runs-on: ubuntu-latest
    steps:
      #---------check out-------
      - name: Checkout Repository
        uses: actions/checkout@v3
      #---------download artifact from other job-------
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: mshive-frontend
          path: /tmp/mshive-frontend.tar
      #---------Check Docker Image-------
      - name: Check if the Docker image tar file exists
        run: |
          mkdir -p archive
          mv /tmp/mshive-frontend.tar ./archive/
      - name: Check the type of the Docker image tar file
        run: |
          file ./archive/mshive-frontend.tar
          ls && pwd
          chmod a+r ./archive/mshive-frontend.tar

  deploy_to_target_server:
    name: Deploy Docker Image.tar to Target Server
    needs: dockerize_project
    runs-on: ubuntu-latest
    steps:
      #---------download artifact from other job-------
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: mshive-frontend
          path: /tmp/mshive-frontend.tar
      #---------set basic runner env for receiving image.tar-------
      - name: Set Runner Env
        run: |
          mkdir -p archive
          mv /tmp/mshive-frontend.tar ./archive/
          file ./archive/mshive-frontend.tar
      #----------CLear Existed Env-----------
      - name: Clear Existed Env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /
            mkdir -p mydata/project_file
            cd /mydata/project_file
            rm -rf mshive_frontend
            mkdir mshive_frontend
      #---------SCP Docker Image-------
      - name: SCP Docker Image.tar to Target Server
        uses: appleboy/scp-action@master
        with:
          source: "./archive"
          target: "/mydata/project_file/mshive_frontend"
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
      #----------CLear Existed Env-----------
      - name: MV tar file to ../ dir
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /mydata/project_file/mshive_frontend/archive/mshive-frontend.tar
            mv mshive-frontend.tar /mydata/project_file/mshive_frontend
            cd /mydata/project_file/mshive_frontend
            rm -rf archive
      #----------Docker Run-----------
      - name: Docker Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /mydata/project_file/mshive_frontend
            docker stop -f mshive-frontend 2>/dev/null || true
            docker rm -f mshive-frontend 2>/dev/null || true
            docker rmi -f mshive-frontend 2>/dev/null || true
            docker load -i mshive-frontend.tar
            docker run -d -p 443:443 --name mshive-frontend --network mshive_proxy mshive-frontend

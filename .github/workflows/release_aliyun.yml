name: Release On Aliyun
# 现在项目需要用github-ci将项目配置好，用docker打包，并且把Nginx也得塞进去跑起来，相当于打包好的镜像在指定后的服务器上能通过docker命令直接跑起来
on:
  push:
    branches:
      - release_aliyun

jobs:
  build:
    name: Build with Dockerfile
    runs-on: ubuntu-latest
    steps:
      #---------check out-------
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Mkdir
        run: mkdir ~/distfiles
      #---------Build Docker Image-------
      - name: Build Docker Image
        run: docker build -t mshive-frontend:latest .
      #---------Check Docker Image-------
      - name: Check if where are my built Docker Image
        run: |
          if docker images mshive-frontend:latest | grep -q mshive-frontend; then
            echo "Docker image mshive-frontend:latest is built successfully."
          else
            echo "Failed to build Docker image mshive-frontend:latest."
            exit 1
          fi
          
          ls && pwd && cd ../ && ls && pwd
      #---------Save Docker Image to Current Dir, or You Can't Find Where It Is------
      - name: Save Docker Image to Current Dir
        run: |
          docker save -o /tmp/mshive-frontend.tar mshive-frontend:latest
      - name: Check if the Docker image tar file exists
        run: |
          ls -l /tmp/mshive-frontend.tar
          cd /tmp
          ls -l
          mv /tmp/mshive-frontend.tar ~/distfiles
          cd ~/distfiles
          ls -l
      - name: Check the type of the Docker image tar file
        run: |
          file ~/distfiles/mshive-frontend.tar
      #---------SCP Docker Image-------
      - name: SCP Docker Image.tar to Target Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          tar_exec: false  # 关闭打包操作
          source: "tmp/*.tar.gz"
          target: "/mydata/project_file/mshive_frontend"

#  deploy:
#    name: Deploy to Server
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      #---------receive artifact to current job-------
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: dist
#          path: dist
#      #---------(use ssh) rm -rf existed dir-------
#      - name: SSH and Remove mshive-backend Dir
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            echo "rm -rf old dist files..."
#            cd /mydata/project_file
#            rm -rf mshive_frontend
#      #---------scp dist to server-------
#      - name: SCP dist to Server
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          port: 22
#          source: "./dist"
#          target: "/mydata/project_file/mshive_frontend"
#
#  dockerize:
#    name: Dockerize Archive
#    needs: deploy
#    runs-on: ubuntu-latest
#    steps:
#      #---------(use ssh) docker build & run-------
#      - name: SSH and Docker Build & Run
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            echo "Building Docker image..."
#
#            # jack in Dockerfile directory
#            cd /mydata/project_file/mshive_frontend
#
#            # if it doesn't exist, create one
#            mkdir -p /etc/nginx/html/mshive-frontend
#
#            # move to nginx/html
#            mv dist /etc/nginx/html/mshive-frontend
#
#            # stop && delete former docker container && image
#            if docker ps -a | grep -q mshive-backend; then
#            docker stop mshive-backend
#            docker rm mshive-backend
#            fi
#            if docker images | grep -q mshive-backend; then
#            docker rmi mshive-backend
#            fi
#
#            # use current directory's Dockerfile to build image
#            docker build -t mshive-backend .
#
#            # run project
#            docker run -d -p 8081:8081 --name mshive-backend mshive-backend
